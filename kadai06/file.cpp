/*******************************************************************************
* タイトル:		ファイルプログラム
* プログラム名:	file.cpp
* 作成者:		tono
* 作成日:		2018/06/15
********************************************************************************

/***************************************************************************
* インクルードファイル****
*******************************************************************************/
#include "main.h"
#include "player.h"
#include "file.h"


/*******************************************************************************
* マクロ定義
*******************************************************************************/



/*******************************************************************************
* 構造体定義
*******************************************************************************/



/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/



/*******************************************************************************
マクロ定義
*******************************************************************************/



/*******************************************************************************
* グローバル変数
*******************************************************************************/
SAVEDATA	save;		// セーブデータ作成場所


/*******************************************************************************
関数名:	void SaveData( void )
引数:	void
戻り値:	void
説明:	セーブデータを作成し、ファイルへ出力する
*******************************************************************************/
void SaveData(void)
{
	PLAYER *player = GetPlayerAdr(0);	// プレイヤー０番のアドレスを取得する

	// プレイヤーの人数分セーブする
	for (int i = 0; i < PLAYER_MAX; i++, player++)
	{
		save.player[i] = *player;
	}



	// SAVEDATA構造体ごと全部をファイルに出力する
	FILE *fp;

	printf("\nセーブ開始・・・");
	fp = fopen("savedata.bin", "wb");			// ファイルをバイナリ書き込みモードでOpenする fopen関数

	if (fp != NULL)								// ファイルがあれば書き込み、無ければ無視
	{	
		fwrite(&save, 1, sizeof(SAVEDATA), fp);	// 指定したアドレスから指定したバイト数分ファイルへ書き込む　fwrite関数
		fclose(fp);								// Openしていたファイルを閉じる fclose関数
		printf("終了！\n");
	}
	else
	{
		printf("ファイルエラー！\n");
	}

	rewind(stdin);
	getchar();

}


/*******************************************************************************
関数名:	void LoadData( void )
引数:	void
戻り値:	void
説明:	セーブデータをファイルから読み込む
*******************************************************************************/
void LoadData(void)
{
	PLAYER *player = GetPlayerAdr(0);	// プレイヤー０番のアドレスを取得する

	// ファイルからセーブデータを読み込む
	FILE* fp;

	printf("\nロード開始・・・");
	fp = fopen("savedata.bin", "rb");			// ファイルをバイナリ読み込みモードでOpenする

	if (fp != NULL)								// ファイルがあれば書き込み、無ければ無視
	{
		fread(&save, 1, sizeof(SAVEDATA), fp);	// 指定したアドレスへ指定したバイト数分ファイルから読み込む fread関数
		fclose(fp);								// Openしていたファイルを閉じる
		printf("終了！\n");
	}
	else
	{
		printf("ファイルエラー！\n");
	}


	// プレイヤーの人数分、playerワークへ戻す
	for (int i = 0; i < PLAYER_MAX; i++, player++)
	{
		*player = save.player[i];				// ファイルから読み込んだデータを現在のワークへ戻す
	}

	rewind(stdin);
	getchar();

}
